// Code generated by MockGen. DO NOT EDIT.
// Source: ./definition.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gas "github.com/go-sensors/core/gas"
	gomock "github.com/golang/mock/gomock"
)

// MockGasSensor is a mock of GasSensor interface.
type MockGasSensor struct {
	ctrl     *gomock.Controller
	recorder *MockGasSensorMockRecorder
}

// MockGasSensorMockRecorder is the mock recorder for MockGasSensor.
type MockGasSensorMockRecorder struct {
	mock *MockGasSensor
}

// NewMockGasSensor creates a new mock instance.
func NewMockGasSensor(ctrl *gomock.Controller) *MockGasSensor {
	mock := &MockGasSensor{ctrl: ctrl}
	mock.recorder = &MockGasSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasSensor) EXPECT() *MockGasSensorMockRecorder {
	return m.recorder
}

// ConcentrationSpecs mocks base method.
func (m *MockGasSensor) ConcentrationSpecs() []*gas.ConcentrationSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcentrationSpecs")
	ret0, _ := ret[0].([]*gas.ConcentrationSpec)
	return ret0
}

// ConcentrationSpecs indicates an expected call of ConcentrationSpecs.
func (mr *MockGasSensorMockRecorder) ConcentrationSpecs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcentrationSpecs", reflect.TypeOf((*MockGasSensor)(nil).ConcentrationSpecs))
}

// Concentrations mocks base method.
func (m *MockGasSensor) Concentrations() <-chan *gas.Concentration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Concentrations")
	ret0, _ := ret[0].(<-chan *gas.Concentration)
	return ret0
}

// Concentrations indicates an expected call of Concentrations.
func (mr *MockGasSensorMockRecorder) Concentrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Concentrations", reflect.TypeOf((*MockGasSensor)(nil).Concentrations))
}

// Run mocks base method.
func (m *MockGasSensor) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockGasSensorMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockGasSensor)(nil).Run), arg0)
}

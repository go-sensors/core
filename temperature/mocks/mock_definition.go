// Code generated by MockGen. DO NOT EDIT.
// Source: ./definition.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	temperature "github.com/go-sensors/core/temperature"
	units "github.com/go-sensors/core/units"
	gomock "github.com/golang/mock/gomock"
)

// MockTemperatureSensor is a mock of TemperatureSensor interface.
type MockTemperatureSensor struct {
	ctrl     *gomock.Controller
	recorder *MockTemperatureSensorMockRecorder
}

// MockTemperatureSensorMockRecorder is the mock recorder for MockTemperatureSensor.
type MockTemperatureSensorMockRecorder struct {
	mock *MockTemperatureSensor
}

// NewMockTemperatureSensor creates a new mock instance.
func NewMockTemperatureSensor(ctrl *gomock.Controller) *MockTemperatureSensor {
	mock := &MockTemperatureSensor{ctrl: ctrl}
	mock.recorder = &MockTemperatureSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemperatureSensor) EXPECT() *MockTemperatureSensorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockTemperatureSensor) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTemperatureSensorMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTemperatureSensor)(nil).Run), arg0)
}

// TemperatureSpecs mocks base method.
func (m *MockTemperatureSensor) TemperatureSpecs() []*temperature.TemperatureSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemperatureSpecs")
	ret0, _ := ret[0].([]*temperature.TemperatureSpec)
	return ret0
}

// TemperatureSpecs indicates an expected call of TemperatureSpecs.
func (mr *MockTemperatureSensorMockRecorder) TemperatureSpecs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemperatureSpecs", reflect.TypeOf((*MockTemperatureSensor)(nil).TemperatureSpecs))
}

// Temperatures mocks base method.
func (m *MockTemperatureSensor) Temperatures() <-chan *units.Temperature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Temperatures")
	ret0, _ := ret[0].(<-chan *units.Temperature)
	return ret0
}

// Temperatures indicates an expected call of Temperatures.
func (mr *MockTemperatureSensorMockRecorder) Temperatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Temperatures", reflect.TypeOf((*MockTemperatureSensor)(nil).Temperatures))
}
